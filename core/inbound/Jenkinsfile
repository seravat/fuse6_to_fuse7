// Set your project Prefix
def prefix      = "jtavares"

// Set variable globally to be available in all stages
// Set Maven command to always include Nexus Settings
def mvnCmd      = "mvn -s ./nexus_openshift_settings.xml"
// Set Development and Production Project Names
def devProject  = "dev"
// Set the tag for the development image: version + build number
def devTag      = "0.0-0"
// Set the tag for the production image: version
def prodTag     = "0.0"
def destApp     = "tasks-green"
def activeApp   = ""

pipeline {
  agent {
    // Using the Jenkins Agent Pod that we defined earlier
    label "maven-appdev"
  }
  stages {
    // Checkout Source Code and calculate Version Numbers and Tags
    stage('Checkout Source') {
      steps {
        // Get code from protected Git repository - Maybe use service instead of route!!!
        git 'http://gogs-jtavares-gogs.apps.cluster-bcn.bcn.ocp4.opentlc.com/CICDLabs/openshift-tasks.git'
        //checkout scm

       script {
          def pom = readMavenPom file: 'pom.xml'
          def version = pom.version

          // Set the tag for the development image: version + build number.
          devTag  = "${version}-${currentBuild.number}"

          // Set the tag for the production image: version
          prodTag = "${version}"

        }
      }
    }

    // Using Maven build the jar file
    // Do not run tests in this step
    stage('Build Jar File') {
      steps {
        echo "Building version ${devTag}"

        sh "mvn clean install -DskipTests -s ./nexus_openshift_settings.xml"

      }
    }

    // Using Maven run the unit tests
    stage('Unit Tests') {
      steps {
        echo "Running Unit Tests"

        sh "mvn clean test -s ./nexus_openshift_settings.xml"
      }
    }

    // Publish the built jar file to Nexus
    stage('Publish to Nexus') {
      steps {
        echo "Publish to Nexus"

        sh "mvn deploy -DskipTests -Dmaven.install.skip=true -s ./nexus_openshift_settings.xml \
        -DaltDeploymentRepository=nexus::default::http://nexus3-jtavares-nexus.apps.cluster-bcn.bcn.ocp4.opentlc.com/repository/releases"

      }
    }

    // Build the OpenShift Image in OpenShift and tag it.
    stage('Build and Tag OpenShift Image') {
      steps {
        echo "Building OpenShift container image inbound:${devTag}"

        script {
          // Use the Default Cluster
          openshift.withCluster() {
             openshift.withProject("dev") {
                openshift.selector("bc", "inbound").startBuild("--from-file=http://nexus3.${prefix}-nexus.svc.cluster.local:8081/repository/releases/com/customer/app/inbound/${devTag}/inbound-${devTag}.jar",
                 "--wait=true")
                // Tag the image using the devTag.
                openshift.tag("inbound:latest", "inbound:${devTag}")
             }
          }
        }
      }
    }

    // Deploy the built image to the Development Environment.
    stage('Deploy to Dev') {
      steps {
        echo "Deploy container image to Development Project"

        // TBD: Deploy the image
        // 1. Update the image on the dev deployment config
        // 2. Update the config maps with the potentially changed properties files
       // 3. Reeploy the dev deployment
       // 4. Wait until the deployment is running
       //    The following code will accomplish that by
       //    comparing the requested replicas
       //    (rc.spec.replicas) with the running replicas
       //    (rc.status.readyReplicas)
       //
        script{
          openshift.withCluster() {
            openshift.withProject("dev") {

              openshift.set("image", "dc/inbound", "tasks=image-registry.openshift-image-registry.svc:5000/dev/inbound:${devTag}")

              // Deploy the application.
              openshift.selector("dc", "inbound").rollout().latest();

              def dc = openshift.selector("dc", "inbound").object()
              def dc_version = dc.status.latestVersion
              def rc = openshift.selector("rc", "inbound-${dc_version}").object()

              echo "Waiting for ReplicationController inbound-${dc_version} to be ready"
              while (rc.spec.replicas != rc.status.readyReplicas) {
                sleep 5
                rc = openshift.selector("rc", "inbound-${dc_version}").object()
              }

            }
          }
        }
      }

    }
  }
}

