#!groovy
// Set your project Prefix
def prefix      = "jtavares"

// Set variable globally to be available in all stages
// Set Maven command to always include Nexus Settings
def mvnCmd      = "mvn -s nexus_openshift_settings.xml"
// Set Development and Production Project Names
def devProject  = "jtavares-tasks-dev"
// Set the tag for the development image: version + build number
def devTag      = "0.0-0"
// Set the tag for the production image: version
def prodTag     = "0.0"

podTemplate(
  label: "skopeo-pod",
  cloud: "openshift",
  inheritFrom: "maven",
  containers: [
    containerTemplate(
      name: "jnlp",
      image: "docker-registry.default.svc:5000/jtavares-jenkins/jenkins-agent-appdev",
      resourceRequestMemory: "2Gi",
      resourceLimitMemory: "3Gi",
      resourceRequestCpu: "1",
      resourceLimitCpu: "2"
    )
  ]
){
  node('skopeo-pod') {

    // Checkout Source Code.
    stage('Checkout Source') {
      checkout scm
    }

    dir('artifacts'){
      def pom = readMavenPom file: 'pom.xml'
      def version = pom.version

      //Build project dependency
      stage('Build Jar File') {

          sh "mvn -s nexus_openshift_settings.xml clean install -DskipTests"
          sh "mvn -s nexus_openshift_settings.xml deploy -DskipTests -Dmaven.install.skip=true\
          -DaltDeploymentRepository=nexus::default::http://nexus3-gpte-hw-cicd.apps.na311.openshift.opentlc.com/repository/releases/jtavares"
  
      }


    }

    dir ('inbound'){
      def pom = readMavenPom file: 'pom.xml'
      def version = pom.version

      // Set the tag for the development image: version + build number.
      devTag  = "${version}-${currentBuild.number}"

      // Set the tag for the production image: version
      prodTag = "${version}"

      // Using Maven build the jar file
      // Do not run tests in this step
      stage('Build Jar File') {
          echo "Building version ${devTag}"

          sh "${mvnCmd} clean install -DskipTests"

        
      }

      // Using Maven run the unit tests
      stage('Unit Tests') {
          echo "Running Unit Tests"

          sh "${mvnCmd} clean test"
        
      }

      // Publish the built jar file to Nexus
      stage('Publish to Nexus') {
          echo "Publish to Nexus"

          sh "${mvnCmd} deploy -DskipTests -Dmaven.install.skip=true\
          -DaltDeploymentRepository=nexus::default::http://nexus3-gpte-hw-cicd.apps.na311.openshift.opentlc.com/repository/releases/jtavares"

        
      }

      // Build the OpenShift Image in OpenShift and tag it.
      stage('Build and Tag OpenShift Image') {
          echo "Building OpenShift container image inbound:${devTag}"

          script {
            // Use the Default Cluster
            openshift.withCluster() {
              openshift.withProject("jtavares-tasks-dev") {
                  openshift.selector("bc", "inbound").startBuild("--from-file=http://nexus3-gpte-hw-cicd.apps.na311.openshift.opentlc.com/repository/releases/jtavares/com/customer/app/inbound/${devTag}/inbound-${devTag}.jar",
                  "--wait=true")
                  // Tag the image using the devTag.
                  openshift.tag("inbound:latest", "inbound:${devTag}")
              }
            }
          }
        
      }

      // Deploy the built image to the Development Environment.
      stage('Deploy to Dev') {
          echo "Deploy container image to Development Project"

          // TBD: Deploy the image
          // 1. Update the image on the dev deployment config
          // 2. Update the config maps with the potentially changed properties files
        // 3. Reeploy the dev deployment
        // 4. Wait until the deployment is running
        //    The following code will accomplish that by
        //    comparing the requested replicas
        //    (rc.spec.replicas) with the running replicas
        //    (rc.status.readyReplicas)
        //
          script{
            openshift.withCluster() {
              openshift.withProject("jtavares-tasks-dev") {

                openshift.set("image", "dc/inbound", "tasks=image-registry.openshift-image-registry.svc:5000/jtavares-tasks-dev/inbound:${devTag}")

                // Deploy the application.
                openshift.selector("dc", "inbound").rollout().latest();

                def dc = openshift.selector("dc", "inbound").object()
                def dc_version = dc.status.latestVersion
                def rc = openshift.selector("rc", "inbound-${dc_version}").object()

                echo "Waiting for ReplicationController inbound-${dc_version} to be ready"
                while (rc.spec.replicas != rc.status.readyReplicas) {
                  sleep 5
                  rc = openshift.selector("rc", "inbound-${dc_version}").object()
                }

              }
            }
          }
        

      }
    }
  }
}

